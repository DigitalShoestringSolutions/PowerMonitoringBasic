#=-= Define Interface Modules =-=
[interface.mb1]
    module="modbus"
    class="ModbusTCPSync"
[interface.mb1.config]
    adapter_addr="192.168.0.7"
    adapter_port=502

#=-= Define Device Modules =-=
[device.mfm1]
    module="multi_function_meter_HOBUT"
    class="HOBUT_850_LTHN"
    interface="mb1"
[device.mfm1.config]
    slave_id=1
[device.mfm1.variables]
    I1 = "current_rms"
    V1 = "measured_phase_voltage"
    power_real = "power"

#=-= Define Calculation Modules =-=
# [calculation.power]
#     module="gen_electrical"
#     class="PowerToVoltageCurrent"
# [calculation.power.config]
#     phases = 1
# [calculation.power.variables]
#     power_in = "power"
#     rms_current_out = "current_rms"
#     rms_phase_voltage_out = "phase_voltage"

[calculation.set_voltage]
    module="gen_constants"
    class="RenameDefaultConstant"
[calculation.set_voltage.config]
    value = 230
[calculation.set_voltage.variables]
    original_variable = "measured_phase_voltage"
    new_variable = "phase_voltage"

#=-= Define Calculation Pipelines =-=
[pipelines]
    power_pipeline = ["power","set_voltage"]

#=-= Define Measurements Pipelines =-=
[measurement]
    module="gen_sample"
    class="SingleSample"
[measurement.config]
    period = 1.0 # seconds
[[measurement.sensing_stacks]]
    device = "mfm1"
    pipeline = "power_pipeline"
    constants = {'phase'='single'}

[output.overall]
    path = "power_monitoring/{{machine}}"
[output.overall.spec]
    timestamp = '$.timestamp'
    machine = "#Machine_1"
    power = '$.power'
    
[output.single_phase]
    path = "power_monitoring/{{machine}}/{{phase}}"
[output.single_phase.spec]
    machine = "#Machine_1"
    timestamp = '$.timestamp'
    current = "$.current_rms"
    voltage = "$.measured_phase_voltage"
    phase = "$.phase"

[mqtt]
    broker = "mqtt.docker.local"
    port = 1883   #common mqtt ports are 1883 and 8883
    base_topic_template = ""

    #reconnection characteristics
    # start: timeout = initial,
    # if timeout < limit then
    #   timeout = timeout*backoff
    # else
    #   timeout = limit
    reconnect.initial = 5 # seconds
    reconnect.backoff = 2 # multiplier
    reconnect.limit = 60 # seconds
